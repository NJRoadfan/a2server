#! /bin/bash
# vim: set tabstop=4 shiftwidth=4 expandtab filetype=sh:

# A2SERVER -- a virtual machine for sharing files to Apple II clients
# by Ivan X, ivan@ivanx.com

# Installs Netatalk 2.x for debian/raspbian

# Thanks to Steven Hirsch, Geoff Body, Peter Wong, Tony Diaz, and others
# at comp.sys.apple2 for the work they've done and insight they've
# offered which made it possible to put this together.



# --- Installing netatalk

# Ensure URL we'll use ends in a /
case "$A2SERVER_SCRIPT_URL" in
    */) scriptURL="$A2SERVER_SCRIPT_URL" ;;
    *) scriptURL="${A2SERVER_SCRIPT_URL:-https://raw.githubusercontent.com/RasppleII/a2server/current}/" ;;
esac
case "$A2SERVER_BINARY_URL" in
    */) binaryURL="$A2SERVER_BINARY_URL" ;;
    *) binaryURL="${A2SERVER_BINARY_URL:-http://ivanx.com/a2server/files}/" ;;
esac
useExternalURL=1
[[ $A2SERVER_NO_EXTERNAL ]] && useExternalURL=

debianVersion=$(cat /etc/debian_version 2> /dev/null)
isRpi=
arch=
if [[ -f /usr/bin/raspi-config ]]; then
    isRpi=1
    arch='rpi'
elif lsb_release -a 2> /dev/null | grep -q 'Distributor ID:.Debian' && [[ $(cut -d . -f 1 <<< $debianVersion) -ge "7" ]]; then
    uname_m="$(uname -m)"
    if [[ $uname_m == "i686" ]]; then
        arch='debian_x86'
    elif [[ $uname_m == "x86_64" ]]; then
        arch='debian_x64'
    fi
fi

debianName=
if [[ $debianVersion ]]; then
    debianMajor=$(cut -d . -f 1 <<< $debianVersion)
    if [[ $debianMajor == "12" ]]; then
        debianName="bookworm"
    elif [[ $debianMajor == "11" ]]; then
        debianName="bullseye"
    elif [[ $debianMajor == "10" ]]; then
        debianName="buster"
    elif [[ $debianMajor == "9" ]]; then
        debianName="stretch"
    elif [[ $debianMajor == "8" ]]; then
        debianName="jessie"
    elif [[ $debianMajor == "7" ]]; then
        debianName="wheezy"
    else
        debianName="unknown"
    fi
fi

# enable SSH (disabled by default in Raspbian from late 2016 onward)
if [[ $isRpi && $debianMajor -ge 8 ]] && ! ps aux | grep -q '[s]shd'; then
    echo "A2SERVER: Enabling ssh access..."
    sudo systemctl enable ssh &> /dev/null && sudo systemctl start ssh &> /dev/null
else
    echo "A2SERVER: ssh access is already enabled."
fi

# skip this if already done
if [[ -f /usr/local/etc/A2SERVER-version ]] && (( $(head -c 3 /usr/local/etc/A2SERVER-version) >= 101 )); then

    echo "A2SERVER: Netatalk is already installed."
    
else

    echo "A2SERVER: Installing Netatalk (this will take a while)..."
    
    # stop Netatalk and samba if running (during upgrade)
    if [[ $(ps --no-headers -C afpd) ]]; then
        sudo /etc/init.d/netatalk stop &> /dev/null
        sudo /etc/init.d/samba stop &> /dev/null
        sudo systemctl stop atalkd cnid afpd papd timelord a2boot macipgw &> /dev/null
        sudo systemctl stop smbd &> /dev/null
    fi
    
    if [[ ! -f /tmp/a2server-packageReposUpdated ]]; then
        # prepare for installing packages
        sudo apt-get -y update
        touch /tmp/a2server-packageReposUpdated
    fi

    # not being used as of 1.2.9, but it's available if full URL to .deb package is supplied
    getOldPackage () { 
        for url in $@; do
            pkgFile=${url##*/}
            pkgName=${pkgFile%%_*}
            if ! dpkg -l $pkgName 2> /dev/null | grep -q '^ii'; then
                if [[ $useExternalURL ]]; then
                    wget -qO "/tmp/${url##*/}" "$url"
                fi
                if [[ $? -ne 0 || ! -f "/tmp/${url##*/}" ]]; then
                    wget -qO "/tmp/${url##*/}" "${binaryURL}external/deb/${url##*/}"
                fi
                sudo dpkg -i "/tmp/${url##*/}"
                sudo apt-get clean
                rm "/tmp/${url##*/}"
            fi
        done
    }
    
    # Dependencies: build-deps for netatalk 2.x
    sudo apt-get install --no-install-recommends --assume-yes build-essential cups cups-browsed avahi-daemon libnss-mdns libcups2-dev libssl-dev libavahi-client-dev libdb5.3-dev libgcrypt20-dev

    sudo apt-get clean
    
    # get Netatalk
    rm -rf /tmp/netatalk &> /dev/null
    mkdir /tmp/netatalk
    cd /tmp/netatalk
    
    if [[ $useExternalURL ]]; then
	wget -qO netatalk-2.2.10.tar.gz "https://github.com/Netatalk/netatalk/releases/download/netatalk-2-2-10/netatalk-2.2.10.tar.gz"
	tar xzf netatalk-2.2.10.tar.gz &> /dev/null

    fi

    cd netatalk-2.2.10

    # prepare to build Netatalk
    ./configure --enable-systemd --enable-cups --disable-quota

    # uninstall Netatalk if already installed
    [[ -f /usr/local/sbin/afpd ]] && sudo make uninstall

    # compile and install Netatalk
    if [[ -f /tmp/a2server-multiThreadedCompilation ]]; then
	echo "Compiling Netatalk with $(nproc) threads..."
	make all -j "$(nproc)"
    else
	make all
    fi
    sudo make install

    # to remove the Netatalk source code (optional), type:
    cd
    rm -rf /tmp/netatalk
fi

# --- Install MacIPgw
if ! hash macipgw &> /dev/null; then
    echo "A2SERVER: Installing TCP over AppleTalk (MacIP)..."

    if [[ $arch && ! -f /tmp/a2server-compileAlways ]]; then
        { wget -qO- "${binaryURL}precompiled/macipgw-${arch}.tgz" | sudo tar Pzx; } 2> /dev/null
    fi
    
    if ! hash macipgw &> /dev/null; then
        wd="$PWD"
        sudo apt-get -y install build-essential
        rm -rf /tmp/macipgw &> /dev/null
        mkdir /tmp/macipgw
        cd /tmp/macipgw
        if [[ $useExternalURL ]]; then
            wget -qO macipgw.zip "https://github.com/jasonking3/macipgw/archive/2a5f6a7521a627e46b18468d44f4306fb0a7b7ab.zip"
            unzip macipgw.zip 2> /dev/null
            rm macipgw.zip &> /dev/null
        fi
        if [ ! -d macipgw* ]; then
            wget -qO macipgw.zip "${binaryURL}external/source/macipgw.zip"
            unzip macipgw.zip 2> /dev/null
            rm macipgw.zip &> /dev/null
        fi
        cd macipgw*
        make
        sudo make install
        cd "$wd"
        rm -rf /tmp/macipgw
    fi
    #copy over files required to setup macipgw on boot
    sudo wget -q -O /lib/systemd/system/macipgw.service "${scriptURL}files/macipgw.service.txt"
    sudo wget -q -O /usr/local/sbin/macipgw-start.sh "${scriptURL}files/macipgw-start.sh.txt"
    sudo chmod ugo+x /usr/local/sbin/macipgw-start.sh
else
    echo "A2SERVER: TCP over AppleTalk (MacIP) has already been installed."
fi
    
# --- Configuring Netatalk

echo "A2SERVER: Configuring Netatalk..."

# enable netatalk services on startup
sudo systemctl enable atalkd cnid afpd papd a2boot timelord macipgw

# allow Guest users to be able to network boot
# sudo sed -i "s/#AFPD_GUEST=nobody/AFPD_GUEST=$USER/" /etc/netatalk/netatalk.conf
# (For a Guest user with different permissions than the compile-time user, create a
# Linux user, and then specify that user for AFPD_GUEST instead.)

# create a symbolic link to the startup configuration file in netatalk configuration folder
#[[ -L /usr/local/etc/netatalk/netatalk.conf ]] \
#|| sudo ln -s /etc/default/netatalk /usr/local/etc/netatalk/netatalk.conf

# create a symbolic link to the netatalk configuration folder in /etc
[[ -L /etc/netatalk ]] || sudo ln -s /usr/local/etc/netatalk /etc/netatalk

if [[ ! $(grep '^- -ddp.*uams_randnum.so' /usr/local/etc/netatalk/afpd.conf) ]]; then
    # set up to allow Guest, Cleartext, RandNum, DHX, and DHX2 login
    # disable DHX (DHCAST128) on Raspberry Pi, which refuses uams if the config string is too long
    [[ -f /usr/bin/raspi-config ]] && dhx="" || dhx="uams_dhx.so,"
    echo -n -e \
    "- -ddp -tcp -uamlist uams_guest.so,uams_clrtxt.so,uams_randnum.so" \
    | sudo tee -a /usr/local/etc/netatalk/afpd.conf > /dev/null
    echo -e ",${dhx}uams_dhx2.so -guestname \"user1\"" \
    | sudo tee -a /usr/local/etc/netatalk/afpd.conf > /dev/null
fi

# replace home folder share and end of file mark with share placeholders
sudo sed -i 's/^~/#share1\n\n#share2/' \
/usr/local/etc/netatalk/AppleVolumes.default

# disable default volume options for Mac OS X clients
sudo sed -i 's/^:DEFAULT/#:DEFAULT/' \
/usr/local/etc/netatalk/AppleVolumes.default

# if [[ ! $(grep ^eth0 /usr/local/etc/netatalk/atalkd.conf) && ! $(grep ^wlan0 /usr/local/etc/netatalk/atalkd.conf) ]]; then
if [[ $(tac /usr/local/etc/netatalk/atalkd.conf | sed '/./,$!d' | head -1 | cut -c 1) == "#" ]]; then
    # enable netatalk on the default network interface
    # needs -router and -zone to prevent GS/OS AppleShare CDEV crash when used
    # with Dayna or Asante bridges
    if [ $isRpi ]; then
	echo -e 'eth0 -router -phase 2 -net 1 -zone "A2SERVER"' | sudo tee -a /usr/local/etc/netatalk/atalkd.conf > /dev/null
    else
	echo -e 'enp0s3 -router -phase 2 -net 1 -zone "A2SERVER"' | sudo tee -a /usr/local/etc/netatalk/atalkd.conf > /dev/null
    fi
fi

if [[ $(tac /usr/local/etc/netatalk/papd.conf | sed '/./,$!d' | head -1 | cut -c 1) == "#" ]]; then
    # enable papd's auto sharing of CUPS printer queues
    echo -e 'cupsautoadd:op=root:' | sudo tee -a /usr/local/etc/netatalk/papd.conf > /dev/null
fi

# Enable CUPS web interface and disable storing of old print jobs
sudo sed -i "/MaxLogSize/a PreserveJobHistory No" /etc/cups/cupsd.conf
sudo cupsctl --remote-admin WebInterface=yes
# Allow current user to add/remove CUPS printer queues
sudo usermod -a -G lpadmin $USER
sudo systemctl restart cups cups-browsed

# 1.3.0: we are no longer setting up new GSFILES
# set up GSFILES share (for GS data files, not GSOS system)
# classic Mac OS file names are allowed (31 chars, mixed case, everything but colons)
#sudo sed -i \
#    's/^#share1/\/media\/A2SHARED\/GSFILES\ GSFILES ea:ad/' \
#    /usr/local/etc/netatalk/AppleVolumes.default

# 1.3.0: if GSFILES is being shared, make directory if not there
if grep -q '^/srv/A2SERVER/GSFILES' /usr/local/etc/netatalk/AppleVolumes.default; then
    [[ -d /srv/A2SERVER/GSFILES ]] || mkdir -p /srv/A2SERVER/GSFILES;
fi

# prior to 1.3.0:
# file names must be ProDOS 8 compliant (all caps, 15 chars, letters/numbers/periods only)
# lowercase filenames will be converted to upper automatically
# need for GS/OS system because it may refer to files by either upper or lower

# 1.3.0+:
# see if shared already uses ciopfs (case-insensitive file system), and convert if not
# restore known GS/OS file paths to mixed case
# set up ciopfs (case insensitive file system) for share
if [[ -d /srv/A2SERVER/A2FILES && ! -d /srv/A2SERVER/.a2files ]]; then
    echo "A2SERVER: Converting A2FILES to support mixed case..."
    sudo /etc/init.d/netatalk stop &> /dev/null
    sudo /etc/init.d/samba stop &> /dev/null
    if ! hash getfattr &> /dev/null; then
        # Dependency: for ciopfs conversion (setfattr)
        sudo apt-get -y install attr &> /dev/null
        sudo apt-get clean
    fi
    rm /srv/A2SERVER/A2FILES/.APPLEDESKTOP 2> /dev/null
    mkdir -p /tmp/netboot
    wget -qO /tmp/A2FILES-list.txt ${binaryURL}A2FILES-list.txt
    find /srv/A2SERVER/A2FILES -name '*' | tail -n +2 | tac > /tmp/filelist.txt
    while read thisFile; do
        mixedCase="${thisFile##*/}"
        gsosPath=$(grep -i -m 1 "^${thisFile}$" /tmp/A2FILES-list.txt)
        [[ $gsosPath ]] && mixedCase="${gsosPath##*/}"
        sudo setfattr -n "user.filename" -v "$mixedCase" "$thisFile"
        if [[ ${thisFile##*/} != $mixedCase ]]; then
            echo -e "  renaming $thisFile to ${mixedCase}\n"
        else
            echo -e "  processing $thisFile\n"
        fi
        sudo mv "$thisFile" "${thisFile%/*}/${mixedCase,,}" 2> /dev/null
    done < /tmp/filelist.txt
    mv /srv/A2SERVER/A2FILES /srv/A2SERVER/.a2files
    mkdir /srv/A2SERVER/A2FILES
    sudo sed -i 's/casefold:toupper //' /usr/local/etc/netatalk/AppleVolumes.default 2> /dev/null
    sudo sed -i 's/^VOLCASEFOLD:.*/VOLCASEFOLD:/' /srv/A2SERVER/.a2files/.appledesktop/.volinfo 2> /dev/null
    sudo sed -i 's|/media/A2SHARED/A2FILES|/srv/A2SERVER/A2FILES|' /srv/A2SERVER/.a2files/.appledesktop/.volinfo 2> /dev/null
fi

# 1.3.0: remove GSFILES if empty
if grep -q '^/srv/A2SERVER/GSFILES' /usr/local/etc/netatalk/AppleVolumes.default; then
    gsFilesContents=
    if [[ -d /srv/A2SERVER/GSFILES ]]; then
        gsFilesContents="$(find /srv/A2SERVER/GSFILES -not -path '*/\.*' | grep -v '^/srv/A2SERVER/GSFILES$' | grep -v '^/srv/A2SERVER/GSFILES/Network Trash Folder$' | grep -v '^/srv/A2SERVER/GSFILES/Temporary Items$')"
        if [[ ! $gsFilesContents ]]; then
            echo "A2SERVER: Removing empty GSFILES shared volume..."
            sudo /etc/init.d/netatalk stop &> /dev/null
            sudo /etc/init.d/samba stop &> /dev/null
            sudo sed -i 's|^/srv/A2SERVER/GSFILES.*$|#share1|' /usr/local/etc/netatalk/AppleVolumes.default
            sudo rm -r /srv/A2SERVER/GSFILES
        else
            echo "A2SERVER: GSFILES shared volume has files, leaving as is."
        fi
    fi
fi

# set up A2FILES case-insensitive share (for ProDOS 8 files, and GS/OS system)
sudo sed -i \
    's/^#share2/\/srv\/A2SERVER\/A2FILES\ A2FILES options:prodos\ ea:ad/' \
        /usr/local/etc/netatalk/AppleVolumes.default
[[ -d /srv/A2SERVER/A2FILES ]] || mkdir -p /srv/A2SERVER/A2FILES
[[ -d /srv/A2SERVER/.a2files ]] || mkdir -p /srv/A2SERVER/.a2files

# set up ciopfs
if ! hash ciopfs &> /dev/null; then
    echo "A2SERVER: Installing ciopfs (case insensitive file system)..."
    cd /tmp

    # Dependency: For ciopfs
    sudo apt-get -y install fuse libglib2.0-0 libattr1 libfuse2
    if [[ $arch && ! -f /tmp/a2server-compileAlways ]]; then
        { wget -qO- "${binaryURL}precompiled/ciopfs-${arch}.tgz" | sudo tar Pzx; } &> /dev/null
    fi
    if [[ -f /etc/fuse.conf ]] && sudo grep -q user_allow_other /etc/fuse.conf; then
        sudo sed -i 's/#user_allow_other/user_allow_other/' /etc/fuse.conf
    else
        echo "user_allow_other" | sudo tee /etc/fuse.conf > /dev/null
    fi

    if ! hash ciopfs &> /dev/null; then
        if [[ ! -f /tmp/a2server-packageReposUpdated ]]; then
            # prepare for installing packages
            sudo apt-get -y update
            touch /tmp/a2server-packageReposUpdated
        fi

        # Dependency: build-dep for ciopfs
        sudo apt-get -y install build-essential libfuse-dev libglib2.0-dev libattr1-dev
        sudo apt-get -y clean

        cd /tmp
        rm -rf /tmp/ciopfs &> /dev/null
        mkdir /tmp/ciopfs
        cd /tmp/ciopfs
        if [[ $useExternalURL ]]; then
            wget -q -O ciopfs-0.4.tar.gz http://www.brain-dump.org/projects/ciopfs/ciopfs-0.4.tar.gz
            if (( $? != 0 )); then
                wget -q -O ciopfs-0.4.tar.gz http://web.archive.org/web/20160911102924/http://www.brain-dump.org/projects/ciopfs/ciopfs-0.4.tar.gz
            fi
            tar zxf ciopfs-0.4.tar.gz &> /dev/null
            rm ciopfs-0.4.tar.gz &> /dev/null
        fi
        if [ ! -f ciopfs*/ciopfs.c ]; then # single brackets required for glob
            wget -q -O ciopfs-0.4.tar.gz ${binaryURL}external/source/ciopfs-0.4.tar.gz
            tar zxf ciopfs-0.4.tar.gz &> /dev/null
            rm ciopfs-0.4.tar.gz &> ?dev/null
        fi
        cd ciopfs*
        make
        sudo mv ciopfs /usr/local/bin
        cd
        rm -rf /tmp/ciopfs
    fi
    if ! grep -q '^ciopfs' /etc/fstab; then
        echo "ciopfs#/srv/A2SERVER/.a2files /srv/A2SERVER/A2FILES fuse allow_other 0 0" | sudo tee -a /etc/fstab > /dev/null
    fi
    if ! mount | grep '^ciopfs.*A2FILES'; then
        sudo ciopfs /srv/A2SERVER/.a2files /srv/A2SERVER/A2FILES -o allow_other
    fi
else
    echo "A2SERVER: ciopfs (case insensitive file system) has already been installed."
fi

if [[ ! -d /srv/A2SERVER/A2FILES/.AppleDesktop ]]; then
    cd /srv/A2SERVER/A2FILES
    mkdir .AppleDesktop
fi

# set up ADTDISKS share (ADTPro disk image folder, if A2CLOUD is installed)    
# classic Mac OS file names are allowed (31 chars, mixed case, everything but colons)
if [[ -d /usr/local/adtpro/disks ]]; then # A2CLOUD/ADTPro installed
    if [[ ! -d /srv/A2SERVER/ADTDISKS ]]; then
        ln -s /usr/local/adtpro/disks /srv/A2SERVER/ADTDISKS
    fi
    if [[ ! $(grep ADTDISKS /usr/local/etc/netatalk/AppleVolumes.default) ]]; then
        sudo sed -i 's@^# End of File@/srv/A2SERVER/ADTDISKS ADTDISKS ea:ad\n\n# End of File@' /usr/local/etc/netatalk/AppleVolumes.default
    fi
fi



# prepare shared volumes for use
afpsync -v < /dev/null

# --- Setting up users

# At this point, the server is usable for Guest access.

# skip if we've already done this
if [[ -f /usr/local/etc/netatalk/afppasswd ]]; then

    echo "A2SERVER: Netatalk user logins have already been set up."

else

    echo
    echo "A2SERVER: Setting up AFP password 'apple2' for Apple II and Mac clients..."
    # echo "A2SERVER: Enter 'apple2' or another password of up to eight characters."
    echo    
    # set registered user login using RandNum authentication
    sudo afppasswd -c
    sudo sed -i "s/^\(${USER}\).*$/\1:6170706C65320000:****************:********/" /usr/local/etc/netatalk/afppasswd
    # (The afppasswd -c only needs to ever be done once. You can repeat
    #   the afppasswd -a to make Netatalk randnum logins for other Linux users.)

fi

# Check AppleTalk kernel module for existence and validity

# get Kernel release (e.g. 3.6.11+) and version (e.g. #557)
kernelRelease=$(uname -r)
kernelMajor=$(cut -d '.' -f 1  <<< $kernelRelease)
kernelMinor=$(cut -d '.' -f 2  <<< $kernelRelease | sed 's/\(^[0-9]*\)[^0-9].*$/\1/')
kernelPatch=$(cut -d '.' -f 3- <<< $kernelRelease | sed 's/\(^[0-9]*\)[^0-9].*$/\1/')
kernelMajorMinor=$(cut -d '.' -f 1-2 <<< $kernelRelease)

# if IPDDP module exists (e.g. Debian, but not Raspbian),
#   AppleTalk kernel module has been compiled to support it and can't work with MacIP
if [[ -f "/lib/modules/$kernelRelease/kernel/drivers/net/appletalk/ipddp.ko" ]]; then
    sudo systemctl stop atalkd cnid afpd papd a2boot timelord macipgw &> /dev/null
    sudo rmmod ipddp 2> /dev/null
    sudo rmmod appletalk 2> /dev/null
    echo "A2SERVER: Replacing AppleTalk kernel module (IPDDP disabled) for MacIP use..."

    sudo mv /lib/modules/$kernelRelease/kernel/net/appletalk/appletalk.ko /tmp 2> /dev/null

    if [[ ! $compileFromSource && ${arch%_*} == "debian" ]]; then
        echo "A2SERVER: Fetching AppleTalk kernel module for Debian..."
        wget -qO /tmp/appletalk.tgz ${binaryURL}precompiled/appletalk-$kernelRelease-${arch}.tgz
        if [[ $? -eq 0 ]]; then
            # if we found a prebuilt one on a2server site, install it and load it
            sudo tar Pxf /tmp/appletalk.tgz &> /dev/null
            sudo depmod
            sudo modprobe appletalk
            if [[ $(lsmod | grep appletalk) ]]; then
                # if it loaded, restart netatalk
                sudo sed -i "s/ATALKD_RUN=no/ATALKD_RUN=yes/" /etc/default/netatalk
                sudo /etc/init.d/netatalk restart &> /dev/null
            else
                echo "A2SERVER: failed to load AppleTalk kernel module"
                # if we didn't load it successfully, remove it
                sudo rm /lib/modules/$kernelRelease/kernel/net/appletalk/appletalk.ko 2> /dev/null
            fi
        else # download failed, so premade kernel not found, remove empty file
            rm /tmp/appletalk.tgz 2>/dev/null
        fi
    fi

    if ! lsmod | grep -q appletalk; then
        # we don't have a prebuilt AppleTalk module, try to build from source
        if [[ ! -f /tmp/a2server-packageReposUpdated ]]; then
            # prepare for installing packages
            sudo apt-get -y update
            touch /tmp/a2server-packageReposUpdated
        fi

        # kernel module compile adapted from from: http://askubuntu.com/a/338403/288003
        for i in 1; do
            echo "A2SERVER: Building AppleTalk kernel module..."
            [[ -f /boot/config-$kernelRelease ]] || break
            sudo apt-get -y install linux-headers-$kernelRelease linux-source-$kernelMajorMinor || break
            sudo apt-get -y install build-essential
            sudo apt-get -y install libelf-dev # required as of kernel 4.14.12, apparently
            cd /usr/src
            kernelSrc=$(find linux-source-${kernelMajorMinor}*)
            if [[ ${kernelSrc##*.} == "xz" ]]; then
                { xzcat $kernelSrc | sudo tar x; } &> /dev/null
            elif [[ ${kernelSrc##*.} == "bz2" ]]; then
                sudo tar jxf $kernelSrc &> /dev/null
            elif [[ ${kernelSrc##*.} == "gz" || ${kernelSrc##*.} == "tgz" ]]; then
                sudo tar zxf $kernelSrc &> /dev/null
            fi
            cd linux-source-$kernelMajorMinor
            sudo make mrproper
            sudo cp ../linux-headers-$kernelRelease/Module.symvers .
            yes '' | sudo make oldconfig
            sudo sed -i 's:^.*IPDDP.*$:# CONFIG_IPDDP is not set:gI' .config # disable IPDDP in kernel config
            sudo sed -i '$!N; /^\(# CONFIG_IPDDP is not set\)\n\1$/!P; D' .config # delete repeated entries
            sudo make prepare
            sudo make modules_prepare
            sudo make M=net/appletalk
            sudo cp net/appletalk/appletalk.ko /lib/modules/$kernelRelease/kernel/net/appletalk
            sudo depmod
            sudo modprobe appletalk
            sudo rm -r /lib/modules/$kernelRelease/kernel/drivers/net/appletalk/ipddp.ko
            sudo rmdir /lib/modules/$kernelRelease/kernel/drivers/net/appletalk 2> /dev/null

            # clean up
            cd
            sudo rm /usr/src/$kernelSrc
            sudo rm -r /usr/src/linux-source-$kernelMajorMinor
            sudo apt-get -y purge linux-source-$kernelMajorMinor
            sudo apt -y autoremove
        done
    fi

    if [[ $(lsmod | grep appletalk) ]]; then
        # if it loaded, make permanent and restart netatalk
        sudo rm /lib/modules/$kernelRelease/kernel/drivers/net/appletalk/ipddp.ko 2> /dev/null
        sudo sed -i 's:^.*IPDDP.*$:# CONFIG_IPDDP is not set:gI' /boot/config-$kernelRelease
        sudo sed -i '$!N; /^\(# CONFIG_IPDDP is not set\)\n\1$/!P; D' /boot/config-$kernelRelease
    else
        # if we didn't load it successfully, put back the one that was there
        echo "A2SERVER: Unable to replace AppleTalk module, replacing original."
        sudo mv /tmp/appletalk.ko /lib/modules/$kernelRelease/kernel/net/appletalk 2> /dev/null
        sudo depmod
        touch /tmp/noMacIP # to notify at end of install
    fi
fi

# --- Start Netatalk (if not running)

sudo systemctl start atalkd cnid afpd papd a2boot timelord macipgw 2> /dev/null

echo
echo "A2SERVER: Netatalk is installed, configured, and running."
echo

# if atalkd isn't running (no AppleTalk), and this is a Rasbperry Pi:
if [[ ( ! $(ps aux | grep [a]talkd) ) && ( $isRpi ) ]]; then    
    
    # if AppleTalk module exists, try to load it
    if [[ -f /lib/modules/$kernelRelease/kernel/net/appletalk/appletalk.ko ]]; then # module present, but not loaded?
        sudo depmod
        sudo modprobe appletalk
        if [[ $(lsmod | grep appletalk) ]]; then
            # if it loaded, restart netatalk
            sudo systemctl restart atalkd cnid afpd papd a2boot timelord macipgw 2> /dev/null
        else
            # if we didn't load it successfully, delete it
            sudo rm -r /lib/modules/$kernelRelease/kernel/net/appletalk
        fi
    fi

    # if no AppleTalk module, try to download it from a2server site
    if [[ ! -f /lib/modules/$kernelRelease/kernel/net/appletalk/appletalk.ko ]]; then # check for rpi kernel module
        echo "A2SERVER: Installing AppleTalk kernel module for Raspbian..."
        wget -qO /tmp/appletalk.ko.gz ${binaryURL}appletalk-$kernelRelease-rpi.ko.gz
        if [[ $? -eq 0 ]]; then
            # if we found a prebuilt one on a2server site, install it and load it
            gunzip -f /tmp/appletalk.ko.gz &> /dev/null
            sudo mkdir -p /lib/modules/$kernelRelease/kernel/net/appletalk
            sudo mv /tmp/appletalk.ko /lib/modules/$kernelRelease/kernel/net/appletalk
            sudo depmod
            sudo modprobe appletalk
            if [[ $(lsmod | grep appletalk) ]]; then
                # if it loaded, restart netatalk
                sudo systemctl restart atalkd cnid afpd papd a2boot timelord macipgw 2> /dev/null
            else
                # if we didn't load it successfully, remove it
                sudo rm -r /lib/modules/$kernelRelease/kernel/net/appletalk 2> /dev/null
            fi
        fi

        if [[ ! $(ps aux | grep [a]talkd) ]]; then
            if [[ -f /tmp/rpiUpdate ]]; then
                echo
                echo "AppleTalk networking is installed but not yet active."
                echo "When installation is complete, please restart your Raspberry Pi"
                echo "when asked or by typing 'system-restart' at the Linux prompt"
                echo "to allow Apple II computers to connect."
                echo
            else
                echo
                echo "AppleTalk networking could not be activated"
                echo "for your Raspbian kernel version ($kernelRelease)."
                echo "Please try restarting with 'system-restart'. If that doesn't work,"
                echo "you're not going to be able to connect from an Apple II."
                echo "See http://appleii.ivanx.com/a2server for help."
                echo
            fi
        fi
    fi
fi

# --- Set up Avahi-Daemon (Bonjour/mDNS)
# thanks to: http://missingreadme.wordpress.com/2010/05/08/how-to-set-up-afp-filesharing-on-ubuntu

if [[ ! $(dpkg -l avahi-daemon 2> /dev/null | grep ^ii) || ! $(dpkg -l libnss-mdns 2> /dev/null | grep ^ii) ]]; then
    echo "A2SERVER: Installing Avahi-Daemon (Bonjour/mDNS)..."
    if [[ ! -f /tmp/a2server-packageReposUpdated ]]; then
        # prepare for installing packages
        sudo apt-get -y update
        touch /tmp/a2server-packageReposUpdated
    fi

    # Dependency: Bonjour for netatalk
    sudo apt-get -y install avahi-daemon libnss-mdns &> /dev/null

fi
sudo sed -i 's/^\(hosts.*\)$/\1 mdns/' /etc/nsswitch.conf
if [[ ! -f /etc/avahi/services/afpd.service && ! -f /etc/avahi/services/afpd.service_disabled ]]; then
    echo -e '<?xml version="1.0" standalone="no"?><!--*-nxml-*-->\n<!DOCTYPE service-group SYSTEM "avahi-service.dtd">\n<service-group>\n    <name replace-wildcards="yes">%h</name>\n    <service>\n        <type>_afpovertcp._tcp</type>\n        <port>548</port>\n    </service>\n    <service>\n        <type>_device-info._tcp</type>\n        <port>0</port>\n        <txt-record>model=MacPro</txt-record>\n    </service>\n</service-group>' | sudo tee /etc/avahi/services/afpd.service > /dev/null
fi
sudo systemctl restart avahi-daemon &> /dev/null
